# NOTE: This workflow is overkill for most R packages
# check-standard.yaml is likely a better choice
# usethis::use_github_action("check-standard") will install it.
#
# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: windows-latest, r: '3.6'}
          - {os: ubuntu-16.04,   r: 'devel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest", http-user-agent: "R/4.0.0 (ubuntu-16.04) R (4.0.0 x86_64-pc-linux-gnu x86_64 linux-gnu) on GitHub Actions" }
          - {os: ubuntu-16.04,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-16.04,   r: 'oldrel',  rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-16.04,   r: '3.5',     rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-16.04,   r: '3.4',     rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-16.04,   r: '3.3',     rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install linux dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "16.04"))')
          sudo apt-get -qq update ;
          sudo apt-get install -y cmake libfftw3-dev dcmtk;
          sudo apt-get install -y libv8-dev libssh-dev;
          sudo apt-get install -y libsecret-1-dev libpng-dev libpoppler-cpp-dev;
          sudo apt-get install -y libhdf5-serial-dev libhdf5-dev  ;
          sudo apt-get install -y mesa-common-dev libglu1-mesa-dev || true;
          sudo apt-get install -y libprotobuf-dev protobuf-compiler libprotoc-dev;
          sudo apt-get install -y software-properties-common ;
          sudo apt-get install -y ffmpeg --allow-unauthenticated ;
          sudo apt-get install -y libmagick++-dev ;
          sudo apt-get install -y ghostscript imagemagick || true ;
          sudo apt-get install -y libudunits2-dev ;
          sudo add-apt-repository -y ppa:opencpu/jq ;
          sudo apt-get install -y libjq-dev ;
          sudo apt-get install libudunits2-dev
          sudo apt-get install libgdal-dev
          sudo apt-get install libglu1-mesa libxi-dev libxmu-dev libglu1-mesa-dev

      - name: Install FSL
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y libmng2 ; 
          sudo apt-get install -y libmng1 ; 
          sudo updatedb;
          
          wget https://fsl.fmrib.ox.ac.uk/fsldownloads/fslinstaller.py || echo "couldn't download fsl";  
          python --version
          if [[ -f fslinstaller.py ]]; 
          then
            travis_wait 100 sudo python fslinstaller.py -d /usr/local/fsl --quiet || echo "couldn't install fsl"; 
            sudo rm -rf fslinstaller.py ;
            sudo rm -rf travis_wait*.log ;      
          fi
          export PATH=${PATH}:/usr/local/fsl/bin
          
      - name: Install FreeSurfer
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y install bc binutils libgomp1 perl psmisc sudo tar tcsh unzip uuid-dev vim-common libjpeg62-dev || true ;
          travis_wait 100 wget --quiet -O freesurfer.tar.gz https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.0/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz ;
          travis_wait 100 sudo tar -C /usr/local -xzf freesurfer.tar.gz ;
          sudo rm -rf freesurfer.tar.gz ;
          sudo rm travis_wait*.log ;
          export FREESURFER_HOME=/usr/local/freesurfer; source $FREESURFER_HOME/SetUpFreeSurfer.sh ;
          export PATH=${PATH}:${FREESURFER_HOME}/bin:${FREESURFER_HOME}/mni/bin ;
          sudo chown -R $(whoami) ${FREESURFER_HOME};
    
      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}

      - name: Install R dependencies
        run: |
          remotes::install_deps(dependencies = c("Depends", "Suggests"))
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
